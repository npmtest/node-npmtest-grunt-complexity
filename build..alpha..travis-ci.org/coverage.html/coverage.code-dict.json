{"/home/travis/build/npmtest/node-npmtest-grunt-complexity/test.js":"/* istanbul instrument in package npmtest_grunt_complexity */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-complexity/lib.npmtest_grunt_complexity.js":"/* istanbul instrument in package npmtest_grunt_complexity */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_complexity = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_complexity = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-complexity/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-complexity && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_complexity */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_complexity\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_complexity.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_complexity.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_complexity.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_complexity.__dirname + '/lib.npmtest_grunt_complexity.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-complexity/node_modules/grunt-complexity/Gruntfile.js":"/*global module:false*/\nmodule.exports = function(grunt) {\n\n\t// Project configuration.\n\tgrunt.initConfig({\n\n\t\tfiles: ['Gruntfile.js', 'tasks/**/*.js', 'test/**/*.js'],\n\n\t\twatch: {\n\t\t\tall: {\n\t\t\t\tfiles: '<%= files %>'\n\t\t\t}\n\t\t},\n\n\t\tjshint: {\n\t\t\tall: '<%= files %>',\n\t\t\toptions: {\n\t\t\t\tesnext: true\n\t\t\t}\n\t\t},\n\n\t\tcomplexity: {\n\t\t\tgeneric: grunt.file.readJSON('complexity.json')\n\t\t}\n\n\t});\n\n\tgrunt.loadNpmTasks('grunt-contrib-jshint');\n\n\tgrunt.registerTask('default', ['jshint', 'complexity']);\n\n\t// Used for testing only, you shouldn't add this to your code:\n\tgrunt.loadTasks('tasks');\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-complexity/node_modules/grunt-complexity/tasks/complexity.js":"/*global module:false*/\nvar escomplex = require('typhonjs-escomplex');\nvar _ = require('lodash');\n\nmodule.exports = function(grunt) {\n\tvar MultiReporter = require('./reporters/multi')(grunt);\n\tvar ConsoleReporter = require('./reporters/Console')(grunt);\n\tvar XMLReporter = require('./reporters/XML')(grunt);\n\tvar JSLintXMLReporter = require('./reporters/JSLintXML')(grunt, XMLReporter);\n\tvar checkstyleReporter = require('./reporters/CheckstyleXML')(grunt, XMLReporter);\n\tvar pmdReporter = require('./reporters/PmdXML')(grunt, XMLReporter);\n\n\tvar Complexity = {\n\n\t\tdefaultOptions: {\n\t\t\tbreakOnErrors: true,\n\t\t\terrorsOnly: false,\n\t\t\tcyclomatic: [3, 7, 12],\n\t\t\thalstead: [8, 13, 20],\n\t\t\tmaintainability: 100,\n\t\t\thideComplexFunctions: false\n\t\t},\n\n\t\tnormalizeOptions: function(options) {\n\t\t\t// Handle backward compatibility of thresholds\n\t\t\tif (options.cyclomatic instanceof Array === false) {\n\t\t\t\toptions.cyclomatic = [\n\t\t\t\t\toptions.cyclomatic\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tif (options.halstead instanceof Array === false) {\n\t\t\t\toptions.halstead = [\n\t\t\t\t\toptions.halstead\n\t\t\t\t];\n\t\t\t}\n\n\t\t\treturn options;\n\t\t},\n\n\t\tbuildReporter: function(files, options) {\n\t\t\tvar reporter = new MultiReporter(files, options);\n\t\t\treporter.addReporter(ConsoleReporter);\n\n\t\t\tif (options.jsLintXML) {\n\t\t\t\treporter.addReporter(JSLintXMLReporter);\n\t\t\t}\n\n\t\t\tif (options.checkstyleXML) {\n\t\t\t\treporter.addReporter(checkstyleReporter);\n\t\t\t}\n\n\t\t\tif (options.pmdXML) {\n\t\t\t\treporter.addReporter(pmdReporter);\n\t\t\t}\n\n\t\t\tif (options.broadcast && options.broadcast === true) {\n\t\t\t\tvar eventReporter = require('./reporters/event-reporter')(grunt);\n\t\t\t\treporter.addReporter(eventReporter);\n\t\t\t}\n\n\t\t\treturn reporter;\n\t\t},\n\n\t\tisComplicated: function(data, options) {\n\t\t\tvar complicated = false;\n\n\t\t\tif (data.cyclomatic > options.cyclomatic[0]) {\n\t\t\t\tcomplicated = true;\n\t\t\t}\n\n\t\t\tif (data.halstead.difficulty > options.halstead[0]) {\n\t\t\t\tcomplicated = true;\n\t\t\t}\n\n\t\t\treturn complicated;\n\t\t},\n\n\t\tisMaintainable: function(data, options) {\n\t\t\tvar expected = options.maintainability;\n\t\t\tvar actual = data.maintainability;\n\n\t\t\treturn expected <= actual;\n\t\t},\n\n\t\tassignSeverity: function(data, options) {\n\t\t\tvar levels = [\n\t\t\t\t'info',\n\t\t\t\t'warning',\n\t\t\t\t'error'\n\t\t\t];\n\n\t\t\tif (options.cyclomatic.length === 1 && options.halstead.length === 1) {\n\t\t\t\t// backward compatibility here: any issue will raise a warning\n\t\t\t\tif (data.cyclomatic > options.cyclomatic[0] || data.halstead.difficulty > options.halstead[0]) {\n\t\t\t\t\tdata.severity = 'warning';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlevels.forEach(function(level, i) {\n\t\t\t\t\tif (data.cyclomatic > options.cyclomatic[i] || data.halstead.difficulty > options.halstead[i]) {\n\t\t\t\t\t\tdata.severity = levels[i];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn data;\n\t\t},\n\n\t\treportComplexity: function(reporter, analysis, filepath, options) {\n\t\t\tvar classFunctionsReports = this.getFunctionsFromClasses(analysis.classes);\n\t\t\tvar methodFunctionsReports = analysis.methods;\n\t\t\tvar complicatedFunctions = []; \n\t\t\t\n\t\t\tif (options.hideComplexFunctions !== true) {\n\t\t\t\tvar allFunctionReports = methodFunctionsReports.concat(classFunctionsReports);\n\t\t\t\tcomplicatedFunctions = this.getComplicatedFunctions(allFunctionReports, options);\n\t\t\t}\n\n\t\t\tgrunt.fail.errorcount += complicatedFunctions.length;\n\t\t\treporter.complexity(filepath, complicatedFunctions);\n\t\t},\n\n\t\tgetFunctionsFromClasses: function(classes) {\n\t\t\treturn _.flatMap(classes, 'methods');\n\t\t},\n\n\t\tgetComplicatedFunctions: function(methodList, options) {\n\t\t\treturn methodList.filter((data) => this.isComplicated(data, options)).map((data) => this.assignSeverity(data, options));\n\t\t},\n\n\t\treportMaintainability: function(reporter, analysis, filepath, options) {\n\t\t\tvar valid = this.isMaintainable(analysis, options);\n\t\t\tif (!options.errorsOnly || !valid) {\n\t\t\t\treporter.maintainability(filepath, valid, analysis);\n\t\t\t}\n\t\t},\n\n\t\tgetProjectInfos: function(files) {\n\t\t\treturn files.map((filepath) => {\n\t\t\t\tvar content = grunt.file.read(filepath);\n\t\t\t\t\tif (!content.length) {\n\t\t\t\t\t\tthrow new Error('Empty source file: \\'' + filepath + '\\'.');\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn { srcPath: filepath, code: content };\n\t\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\t\tdisplayReports: function(reporter, fileReports, options) {\n\t\t\tfileReports = _.orderBy(fileReports,'analysis.maintainability', 'asc');\n\t\t\tgrunt.fail.errorcount = _.countBy(fileReports, (report) => this.isMaintainable(report, options)).true || 0;\n\t\t\tfileReports.forEach((info) => {\n\t\t\t\tthis.reportMaintainability(reporter, info.analysis, info.filepath, options);\n\t\t\t\tthis.reportComplexity(reporter, info.analysis, info.filepath, options);\n\t\t\t});\n\t\t},\n\n\t\tanalyze: function(reporter, files, options) {\n\t\t\treporter.start();\n\t\t\tvar analyzedProject = escomplex.analyzeProject(this.getProjectInfos(files), options);\n\t\t\tvar fileReports = analyzedProject.modules.map((moduleReport) => ({ filepath: moduleReport.srcPath, analysis: moduleReport }));\n\t\t\tthis.displayReports(reporter, fileReports, options);\n\t\t\treporter.finish();\n\t\t}\n\t};\n\n\tgrunt.registerMultiTask('complexity', 'Determines complexity of code.', function() {\n\t\tvar files = this.filesSrc || grunt.file.expandFiles(this.file.src);\n\t\t\texcludedFiles = this.data.exclude;\n\n\t\t// Exclude any unwanted files from 'files' array\n\t\tif (excludedFiles) {\n\t\t\tgrunt.file.expand(excludedFiles).forEach(function (e) { files.splice(files.indexOf(e), 1); });\n\t\t}\n\n\t\t// Set defaults\n\t\tvar options = Complexity.normalizeOptions(this.options(Complexity.defaultOptions));\n\n\t\tvar reporter = Complexity.buildReporter(files, options);\n\n\t\tComplexity.analyze(reporter, files, options);\n\n\t\treturn options.breakOnErrors === false || this.errorCount === 0;\n\t});\n\n\treturn Complexity;\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-complexity/node_modules/grunt-complexity/tasks/reporters/event-reporter.js":"/*\n A reporter that broadcasts data the aggregated\n by grunt-complexity over the grunt event-bus.\n\n author:  David Linse\n version: 0.0.1\n license: MIT\n\n It emits the following \"complex\"-namespaced events:\n\n   * grunt-complexity.start\n   * grunt-complexity.maintainability\n   * grunt-complexity.complexity (TBD)\n   * grunt-complexity.finish\n\n */\n\nmodule.exports = function(grunt) {\n  'use strict';\n\n  var EventReporter = function(filenames, options) {\n    this.options = options;\n  };\n\n  EventReporter.prototype = {\n\n    // only invoked when offending code was detected\n    //\n    complexity: function(filepath, complexFunctions) {\n\n      //\n      // A possible workaround could be to 'force' a run\n      // w/ all metrics set to it's minimum and 'breakOnError' option\n      // set to 'false'\n\n      // TODO\n    },\n\n    maintainability: function(filepath, valid, analysis) {\n      grunt.event.emit('grunt-complexity.maintainability', {\n        filepath: filepath,\n        valid: valid,\n        maintainability: analysis.maintainability\n      });\n    },\n\n    start: function() {\n      grunt.event.emit('grunt-complexity.start');\n    },\n\n    finish: function() {\n      grunt.event.emit('grunt-complexity.finish');\n    }\n  };\n\n  return EventReporter;\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-complexity/node_modules/grunt-complexity/tasks/reporters/multi.js":"module.exports = function(grunt) {\n\n\tvar MultiReporter = function(filenames, options) {\n\t\tthis.filenames = filenames;\n\t\tthis.options = options;\n\t\tthis.reporters = [];\n\t};\n\n\tMultiReporter.prototype = {\n\n\t\taddReporter: function(ReporterConstructor) {\n\t\t\tthis.reporters.push(new ReporterConstructor(this.filenames, this.options));\n\t\t},\n\n\t\tinvoke: function(methodName, argumentsArray) {\n\t\t\tthis.reporters.forEach(function(reporter) {\n\t\t\t\treporter[methodName].apply(reporter, argumentsArray);\n\t\t\t});\n\t\t},\n\n\t\tcomplexity: function(filepath, complexFunctions) {\n\t\t\tthis.invoke('complexity', [filepath, complexFunctions]);\n\t\t},\n\n\t\tmaintainability: function(filepath, valid, analysis) {\n\t\t\tthis.invoke('maintainability', [filepath, valid, analysis]);\n\t\t},\n\n\t\tstart: function() {\n\t\t\tthis.invoke('start');\n\t\t},\n\n\t\tfinish: function() {\n\t\t\tthis.invoke('finish');\n\t\t}\n\n\t};\n\n\treturn MultiReporter;\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-complexity/node_modules/grunt-complexity/tasks/reporters/CheckstyleXML/index.js":"module.exports = function(grunt, XMLReporter) {\n\tvar checkstyleReporter = function(filenames, options) {\n\t\tthis.init(options, 'checkstyleXML', __dirname);\n\t};\n\n\tcheckstyleReporter.prototype = new XMLReporter();\n\n\treturn checkstyleReporter;\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-complexity/node_modules/grunt-complexity/tasks/reporters/Console/helpers.js":"var BLOCK = '\\u2588';\n\nexports.fitWhitespace = function(maxLength, string) {\n\tvar remaining = maxLength - string.length;\n\n\t// Prevent negative values from breaking the array\n\tremaining = Math.max(0, remaining);\n\n\treturn string + Array(remaining + 3).join(' ');\n};\n\nexports.longestString = function(arrayOfStrings) {\n\tvar clone = Array.apply(null, arrayOfStrings);\n\n\tvar longestLength = clone.reduce(function(memo, a) {\n\t\treturn memo > a.length ? memo : a.length;\n\t}, 0);\n\n\treturn longestLength;\n};\n\nexports.generateBar = function(score, threshold) {\n\t// 17.1 for 1/10 of 171, the maximum score\n\tvar magnitude = Math.floor(score / 17.1);\n\tvar bar = Array(magnitude).join(BLOCK) + ' ' + score.toPrecision(5);\n\n\t// Out of 171 points, what % did it earn?\n\tvar rating = score / threshold;\n\n\treturn rating < 1 ? bar.red : rating < 1.2 ? bar.yellow : bar.green;\n};\n"}